#pragma config(Motor,  port1,           WheelLB,       tmotorVex393_HBridge, openLoop, reversed)
#pragma config(Motor,  port2,           WheelRF,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port3,           WheelRB,       tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           ArmRT,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           ArmRB,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port6,           ArmLT,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           ArmLB,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           ClawL,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           ClawR,         tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          WheelLF,       tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "Vex_Competition_Includes.c"




// Global Variables
int drivePwrArr[2];




#define setDriveR(pwr) motor[WheelRB] = \
  motor[WheelRT] = \
  pwr

#define setDriveL(pwr) motor[WheelLB] = \
  motor[WheelLT] = \
  pwr

#define setArm(pwr) motor[ArmRT] = \
  motor[ArmRB] = \
  motor[ArmLT] = \
  motor[LB] = \
  pwr

#define setClaw(pwr) motor[ClawL] = \
  motor[ClawR] = \
  pwr


int* tank(int* arr, int lPwr, int rPwr) {
  arr[0] = lPwr;
  arr[1] = rPwr;
  return arr;
}

int* arcade(int* arr, int move, int rot) {
  arr[0] = move + rot;
  arr[1] = move - rot;
  return arr;
}

void setDrive(int* pwrArr) {
  setDriveL(pwrArr[0]);
  setDriveR(pwrArr[1]);
}

void setDriveForTime(int lPwr, int rPwr, int time) {
  setDriveL(lPwr);
  setDriveR(rPwr);
  wait1Msec(time);
  setDriveL(0);
  setDriveR(0);
}

void setArmForTime(int pwr, int time) {
  setArm(pwr);
  wait1Msec(time);
  setArm(0);
}

void setClawForTime(int pwr, int time) {
  setClaw(pwr);
  wait1Msec(time);
  setClaw(0);
}



void pre_auton()
{

}

task autonomous() {
  setDriveForTime(127, 127, 2000); //Push pre-loaded star under the fence
  setDriveForTime(-127, -127, 500); // Drive backward
  setArmForTime(127, 127, 750); // Arm up
  setClawForTime(127, 750); // Claw opens
  setDriveForTime(-127, 127, 500); // Turn towards cube
  setDriveForTime(127, 127, 750); // Drive forward to cube
  setClawForTime(127, 500); //Grab cube

}

task usercontrol() {
  while(true) {
//Drive Control
    setDrive(arcade(&drivePwrArr, vexRT[Ch2], vexRT[Ch1]));

//Arm Control
    if(vexRT[Btn5U]){
	  setArm(127);
    }
    else if(vexRT[Btn5D]){
	  setArm(-127);
    }
    else {
      setArm(0);
    }

//Claw Control
    if(vexRT[Btn6U]){ //Claw;
	  setClaw(127);
    }
    else if(vexRT[Btn6D]){
	  setClaw(-127);
    }
    else {
	  setClaw(0);
    }

  }

}
void allMotorsOff(){ }
void allTasksStop(){ }
